{"version":3,"sources":["components/MainPage.jsx","components/SimilarMovies.jsx","App.js","serviceWorker.js","store/Store.js","index.js"],"names":["MainPage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getId","bind","assertThisInitialized","_this2","fetch","then","response","json","moviesFromServer","setMovies","id","setId","_this3","movies","react_default","a","createElement","undefined","results","className","map","movie","react_router_dom","to","concat","key","onClick","title","src","backdrop_path","alt","original_language","vote_count","build_default","rating","vote_average","numberOfStars","starDimension","starRatedColor","starSpacing","React","Component","connect","state","dispatch","type","payload","SimilarMovies","prevProps","setState","update","_this4","App","_ref","store","es","basename","process","react_router","exact","path","component","Boolean","window","location","hostname","match","initialState","rootReducer","action","objectSpread","createStore","configureStore","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uTAKMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQP,EAAKO,MAAMC,KAAXP,OAAAQ,EAAA,EAAAR,CAAAD,IAHIA,mFAMC,IAAAU,EAAAP,KAClBQ,MACE,6GAECC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAgB,OAAIL,EAAKX,MAAMiB,UAAUD,mCAG7CE,GACJd,KAAKJ,MAAMmB,MAAMD,oCAGV,IAAAE,EAAAhB,KACCiB,EAAWjB,KAAKJ,MAAhBqB,OAER,OACEC,EAAAC,EAAAC,cAAA,iBACsBC,IAAnBJ,EAAOK,QACNJ,EAAAC,EAAAC,cAAA,MAAIG,UAAU,WAAd,cAEAL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACZN,EAAOK,QAAQE,IAAI,SAAAC,GAAK,OACvBP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAE,mBAAAC,OAAqBH,EAAMX,IAAMe,IAAKJ,EAAMX,IAClDI,EAAAC,EAAAC,cAAA,WAASG,UAAU,cAAcO,QAAS,kBAAMd,EAAKZ,MAAL,GAAAwB,OAAcH,EAAMX,OAClEI,EAAAC,EAAAC,cAAA,MAAIG,UAAU,gBAAgBE,EAAMM,OACpCb,EAAAC,EAAAC,cAAA,OACEY,IAZQ,iCAYeP,EAAMQ,cAC7BC,IAAKT,EAAMM,MACXR,UAAU,iBAEZL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,mBAAb,aAA0CE,EAAMU,mBAChDjB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uBACbL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,qBAAb,eAA8CE,EAAMW,WAApD,KACAlB,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CACEmB,OAAQb,EAAMc,aACdC,cAAe,GACfC,cAAc,OACdC,eAAe,UACfC,YAAY,MACZpB,UAAU,qCA9CTqB,IAAMC,WA0EdC,cAfS,SAAAC,GAAK,MAAK,CAChC9B,OAAQ8B,EAAM9B,SAGW,SAAA+B,GACzB,MAAO,CACLnC,UADK,SACKI,GACR+B,EAAS,CAAEC,KAAM,aAAcC,QAASjC,KAE1CF,MAJK,SAICD,GACJkC,EAAS,CAAEC,KAAM,SAAUC,QAASpC,OAK3BgC,CAGbnD,GC7EIwD,cACJ,SAAAA,EAAYvD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmD,IACjBtD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqD,GAAAhD,KAAAH,KAAMJ,KAEDQ,MAAQP,EAAKO,MAAMC,KAAXP,OAAAQ,EAAA,EAAAR,CAAAD,IAHIA,mFAMC,IAAAU,EAAAP,KAClBQ,MAAK,sCAAAoB,OAED5B,KAAKJ,MAAMkB,GAFV,4EAKFL,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAgB,OAAIL,EAAKX,MAAMiB,UAAUD,iDAG/BwC,GAAW,IAAApC,EAAAhB,KACzBoD,EAAUtC,KAAOd,KAAKJ,MAAMkB,IAC9BN,MAAK,sCAAAoB,OAEDwB,EAAUtC,GAFT,4EAKFL,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAgB,OAAII,EAAKpB,MAAMiB,UAAUD,mCAQ/CE,GACJd,KAAKJ,MAAMmB,MAAMD,GACjBd,KAAKqD,SAAS,CACZC,QAAQ,qCAIH,IAAAC,EAAAvD,KACCiB,EAAWjB,KAAKJ,MAAhBqB,OAER,OACEC,EAAAC,EAAAC,cAAA,iBACsBC,IAAnBJ,EAAOK,QACNJ,EAAAC,EAAAC,cAAA,MAAIG,UAAU,WAAd,cAEAL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAI,KACRT,EAAAC,EAAAC,cAAA,KAAGG,UAAU,QAAb,SAEFL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACZN,EAAOK,QAAQE,IAAI,SAAAC,GAAK,OACvBP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAE,mBAAAC,OAAqBH,EAAMX,IAAMe,IAAKJ,EAAMX,IAClDI,EAAAC,EAAAC,cAAA,WACEG,UAAU,cACVM,IAAKJ,EAAMX,GACXgB,QAAS,kBAAMyB,EAAKnD,MAAL,GAAAwB,OAAcH,EAAMX,OAEnCI,EAAAC,EAAAC,cAAA,MAAIG,UAAU,gBAAgBE,EAAMM,OACpCb,EAAAC,EAAAC,cAAA,OACEY,IApBM,iCAoBiBP,EAAMQ,cAC7BC,IAAKT,EAAMM,MACXR,UAAU,iBAEZL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,mBAAb,aAA0CE,EAAMU,mBAChDjB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uBACbL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,qBAAb,eAA8CE,EAAMW,WAApD,KACAlB,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CACEmB,OAAQb,EAAMc,aACdC,cAAe,GACfC,cAAc,OACdC,eAAe,UACfC,YAAY,MACZpB,UAAU,sCA3ENqB,IAAMC,WAyGnBC,cAhBS,SAAAC,GAAK,MAAK,CAChCjC,GAAIiC,EAAMjC,GACVG,OAAQ8B,EAAM9B,SAGW,SAAA+B,GACzB,MAAO,CACLnC,UADK,SACKI,GACR+B,EAAS,CAAEC,KAAM,aAAcC,QAASjC,KAE1CF,MAJK,SAICD,GACJkC,EAAS,CAAEC,KAAM,SAAUC,QAASpC,OAK3BgC,CAGbK,GC5FaK,MAbf,SAAAC,GAAwB,IAATC,EAASD,EAATC,MACb,OACExC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAUD,MAAOA,GACfxC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAekC,SAAUC,4BACvB3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACE5C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,sBAAsBC,UAAWd,IACnDjC,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtE,QCFvBuE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+EChBAC,EAAe,CACnBtD,OAAQ,GACRH,GAAI,MAGA0D,EAAc,SAACzB,EAAO0B,GAC1B,OAAQA,EAAOxB,MACb,IAAK,aACH,OAAOnD,OAAA4E,EAAA,EAAA5E,CAAA,GACFiD,EADL,CAEE9B,OAAQwD,EAAOvB,UAEnB,IAAK,SACH,OAAOpD,OAAA4E,EAAA,EAAA5E,CAAA,GACFiD,EADL,CAEEjC,GAAI2D,EAAOvB,UAGf,QACE,OAAOH,ICdPW,EDkBiB,kBAAMiB,YAAYH,EAAaD,GClBxCK,GAEdC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,CAAKrB,MAAOA,IAAWsB,SAASC,eAAe,SFwHzD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3E,KAAK,SAAA4E,GACjCA,EAAaC","file":"static/js/main.04ab368b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport StarRatings from 'react-star-ratings';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass MainPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.getId = this.getId.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\r\n      'https://api.themoviedb.org/3/movie/popular?api_key=29574201b32259e0b6282b3bb21eb28c&language=en-US&page=1'\r\n    )\r\n      .then(response => response.json())\r\n      .then(moviesFromServer => this.props.setMovies(moviesFromServer));\r\n  }\r\n\r\n  getId(id) {\r\n    this.props.setId(id);\r\n  }\r\n\r\n  render() {\r\n    const { movies } = this.props;\r\n    const baseUrlForImage = 'http://image.tmdb.org/t/p/w185';\r\n    return (\r\n      <main>\r\n        {movies.results === undefined ? (\r\n          <h1 className=\"loading\">Loading...</h1>\r\n        ) : (\r\n          <div className=\"movies-block\">\r\n            {movies.results.map(movie => (\r\n              <Link to={`/similar-movies_${movie.id}`} key={movie.id}>\r\n                <section className=\"movie-block\" onClick={() => this.getId(`${movie.id}`)}>\r\n                  <h3 className=\"movie__title\">{movie.title}</h3>\r\n                  <img\r\n                    src={baseUrlForImage + movie.backdrop_path}\r\n                    alt={movie.title}\r\n                    className=\"movie__image\"\r\n                  />\r\n                  <p className=\"movie__language\">Language: {movie.original_language}</p>\r\n                  <div className=\"movie__block-rating\">\r\n                    <p className=\"movie__vote-count\">Vote count: {movie.vote_count} </p>\r\n                    <StarRatings\r\n                      rating={movie.vote_average}\r\n                      numberOfStars={10}\r\n                      starDimension=\"15px\"\r\n                      starRatedColor=\"#FFDE6A\"\r\n                      starSpacing=\"2px\"\r\n                      className=\"movie__count-stars\"\r\n                    />\r\n                  </div>\r\n                </section>\r\n              </Link>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  movies: state.movies,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setMovies(movies) {\r\n      dispatch({ type: 'SET_MOVIES', payload: movies });\r\n    },\r\n    setId(id) {\r\n      dispatch({ type: 'SET_ID', payload: id });\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MainPage);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport StarRatings from 'react-star-ratings';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SimilarMovies extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.getId = this.getId.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\r\n      `https://api.themoviedb.org/3/movie/${\r\n        this.props.id\r\n      }/similar?api_key=29574201b32259e0b6282b3bb21eb28c&language=en-US&page=1`\r\n    )\r\n      .then(response => response.json())\r\n      .then(moviesFromServer => this.props.setMovies(moviesFromServer));\r\n  }\r\n\r\n  componentWillUpdate(prevProps) {\r\n    if (prevProps.id !== this.props.id) {\r\n      fetch(\r\n        `https://api.themoviedb.org/3/movie/${\r\n          prevProps.id\r\n        }/similar?api_key=29574201b32259e0b6282b3bb21eb28c&language=en-US&page=1`\r\n      )\r\n        .then(response => response.json())\r\n        .then(moviesFromServer => this.props.setMovies(moviesFromServer));\r\n\r\n      return;\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  getId(id) {\r\n    this.props.setId(id);\r\n    this.setState({\r\n      update: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { movies } = this.props;\r\n    const baseUrlForImage = 'http://image.tmdb.org/t/p/w185';\r\n    return (\r\n      <main>\r\n        {movies.results === undefined ? (\r\n          <h1 className=\"loading\">Loading...</h1>\r\n        ) : (\r\n          <div>\r\n            <Link to={'/'}>\r\n              <p className=\"home\">Home</p>\r\n            </Link>\r\n            <div className=\"movies-block\">\r\n              {movies.results.map(movie => (\r\n                <Link to={`/similar-movies_${movie.id}`} key={movie.id}>\r\n                  <section\r\n                    className=\"movie-block\"\r\n                    key={movie.id}\r\n                    onClick={() => this.getId(`${movie.id}`)}\r\n                  >\r\n                    <h3 className=\"movie__title\">{movie.title}</h3>\r\n                    <img\r\n                      src={baseUrlForImage + movie.backdrop_path}\r\n                      alt={movie.title}\r\n                      className=\"movie__image\"\r\n                    />\r\n                    <p className=\"movie__language\">Language: {movie.original_language}</p>\r\n                    <div className=\"movie__block-rating\">\r\n                      <p className=\"movie__vote-count\">Vote count: {movie.vote_count} </p>\r\n                      <StarRatings\r\n                        rating={movie.vote_average}\r\n                        numberOfStars={10}\r\n                        starDimension=\"15px\"\r\n                        starRatedColor=\"#FFDE6A\"\r\n                        starSpacing=\"2px\"\r\n                        className=\"movie__count-stars\"\r\n                      />\r\n                    </div>\r\n                  </section>\r\n                </Link>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  id: state.id,\r\n  movies: state.movies,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setMovies(movies) {\r\n      dispatch({ type: 'SET_MOVIES', payload: movies });\r\n    },\r\n    setId(id) {\r\n      dispatch({ type: 'SET_ID', payload: id });\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SimilarMovies);\r\n","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport MainPage from './components/MainPage';\nimport SimilarMovies from './components/SimilarMovies';\n\nfunction App({ store }) {\n  return (\n    <Provider store={store}>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/similar-movies_:id\" component={SimilarMovies} />\n          <Route exact path=\"/\" component={MainPage} />\n        </Switch>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from 'redux';\r\n\r\nconst initialState = {\r\n  movies: [],\r\n  id: null,\r\n};\r\n\r\nconst rootReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_MOVIES':\r\n      return {\r\n        ...state,\r\n        movies: action.payload,\r\n      };\r\n    case 'SET_ID':\r\n      return {\r\n        ...state,\r\n        id: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst configureStore = () => createStore(rootReducer, initialState);\r\n\r\nexport default configureStore;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/Store';\n\nconst store = configureStore();\n\nReactDOM.render(<App store={store} />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}